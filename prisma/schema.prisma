generator client {
    provider = "prisma-client-js"
}

datasource db {
    provider = "postgresql"
    url      = env("DB_URL")
}

model Project {
    projectId        String   @id // Maps to projectId in ProjectHub
    name             String
    projectOwner     String // Address of project owner
    tokenAddress     String // Project token contract address
    tokenSymbol      String
    tokenDecimals    Int
    logo             String?
    images           String[]
    shortDescription String?
    longDescription  String?
    txHash           String // Creation transaction
    chainId          Int // Chain where project is deployed
    createdAt        DateTime @default(now())

    // Relations
    pools        Pool[]
    ownerDetails User   @relation(fields: [projectOwner], references: [address])
}

model Pool {
    poolId    String   @id // Maps to poolId in ProjectHub
    address   String // Contract address of deployed pool
    poolType  PoolType @default(LAUNCHPOOL) // Partition of pool types for faster queries
    projectId String
    txHash    String
    chainId   Int
    isListed  Boolean  @default(true)

    // Time tracking (both block numbers and DateTime)
    startBlock BigInt
    endBlock   BigInt
    startDate  DateTime // Converted from startBlock during indexing
    endDate    DateTime // Converted from endBlock during indexing

    // Token information
    projectTokenAddress String
    vAssetAddress       String
    nativeAssetAddress  String

    // Pool configuration
    maxVAssetsPerStaker  BigInt
    ownerShareOfInterest Int    @default(90) // 90% by default

    // Live stats
    totalStaked  BigInt @default(0)
    totalStakers Int    @default(0)

    // Current exchange rates
    currentNativeExRate     BigInt @default(0) // vToken <-> Native token rate
    cumulativeProjectExRate BigInt @default(0) // Staking <-> Project token rate

    // APY information
    stakerAPY   Float @default(0)
    ownerAPY    Float @default(0)
    platformAPY Float @default(0)
    combinedAPY Float @default(0)

    // Relations
    project              Project                       @relation(fields: [projectId], references: [projectId])
    stakes               Stake[]
    unstakes             Unstake[]
    emissionRates        EmissionRate[]
    nativeRateSnapshots  NativeExchangeRateSnapshot[]
    projectRateSnapshots ProjectExchangeRateSnapshot[]

    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt
}

model EmissionRate {
    id           String   @id @default(uuid())
    poolId       String
    changeBlock  BigInt
    changeDate   DateTime // Converted from changeBlock
    emissionRate BigInt // Stored as raw value

    // Relations
    pool Pool @relation(fields: [poolId], references: [poolId])
}

// Tracks vToken<->Native exchange rates over time
model NativeExchangeRateSnapshot {
    id           String   @id @default(uuid())
    poolId       String
    timestamp    DateTime
    blockNumber  BigInt
    exchangeRate BigInt // lastNativeExRate value
    avgGradient  BigInt // avgNativeExRateGradient value
    sampleCount  Int // nativeExRateSampleCount

    // Relations
    pool Pool @relation(fields: [poolId], references: [poolId])

    @@index([poolId, blockNumber])
    @@index([timestamp])
}

// Tracks staking<->project token exchange rates
model ProjectExchangeRateSnapshot {
    id                     String   @id @default(uuid())
    poolId                 String
    timestamp              DateTime
    blockNumber            BigInt
    cumulativeExchangeRate BigInt // cumulativeExchangeRate from the contract
    pendingExchangeRate    BigInt // _getPendingExchangeRate() value when snapshot was taken

    // Relations
    pool Pool @relation(fields: [poolId], references: [poolId])

    @@index([poolId, blockNumber])
    @@index([timestamp])
}

model Stake {
    id           String   @id @default(uuid())
    userAddress  String
    poolId       String
    amount       BigInt // vAsset amount
    nativeAmount BigInt // Calculated native asset amount
    blockNumber  BigInt
    timestamp    DateTime
    txHash       String

    // Capture exchange rates at time of staking
    nativeExchangeRate      BigInt
    cumulativeProjectExRate BigInt

    // Relations
    user User @relation(fields: [userAddress], references: [address])
    pool Pool @relation(fields: [poolId], references: [poolId])

    createdAt DateTime @default(now())
}

model Unstake {
    id                   String   @id @default(uuid())
    userAddress          String
    poolId               String
    amount               BigInt // vAsset amount
    nativeAmount         BigInt // Calculated native asset amount
    claimedProjectTokens BigInt // Amount of project tokens claimed during unstake
    blockNumber          BigInt
    timestamp            DateTime
    txHash               String

    // Capture exchange rates at time of unstaking
    nativeExchangeRate      BigInt
    cumulativeProjectExRate BigInt

    // Relations
    user User @relation(fields: [userAddress], references: [address])
    pool Pool @relation(fields: [poolId], references: [poolId])

    createdAt DateTime @default(now())
}

model InterestClaim {
    id             String    @id @default(uuid())
    poolId         String
    claimType      ClaimType
    claimerAddress String
    amount         BigInt
    blockNumber    BigInt
    timestamp      DateTime
    txHash         String

    createdAt DateTime @default(now())
}

model User {
    address    String   @id
    firstSeen  DateTime @default(now())
    lastActive DateTime @default(now())

    // Relations
    stakes        Stake[]
    unstakes      Unstake[]
    ownedProjects Project[]

    // User stats
    totalPoolsParticipated Int    @default(0)
    totalStaked            BigInt @default(0)
}

model PlatformStatistics {
    id                String   @id @default(uuid())
    date              DateTime @unique // Daily statistics
    totalProjects     Int
    totalPools        Int
    uniqueUsers       Int
    dailyActiveUsers  Int
    totalStakedValue  BigInt
    totalTransactions Int
}

enum PoolType {
    LAUNCHPOOL
    LAUNCHPAD
    VESTING
    FARMING
}

enum ClaimType {
    OWNER_INTEREST
    PLATFORM_FEE
}
