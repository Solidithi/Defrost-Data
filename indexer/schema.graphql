type Project @entity {
	id: ID! # This is on-chain project ID (yes, it's implicit af thanks to TypeORM constraint to have column called id)
	name: String
	# projectOwner: String! # Redundant, already specified by the owner ID
	tokenAddress: String
	tokenSymbol: String
	tokenDecimals: Int
	logo: String
	images: [String!]
	shortDescription: String
	longDescription: String
	txHash: String!
	chainId: Int!
	createdAt: DateTime!

	# Relations
	owner: User!
	launchpools: [Launchpool!]! @derivedFrom(field: "project")

	# Social links (nullable)
	discord: String
	github: String
	telegram: String
	twitter: String
	website: String
}

type Launchpool @entity {
	id: ID! # This is on-chain pool address (yes, it's implicit af thanks to TypeORM constraint to have column called id)
	poolId: String!
	projectId: String! # Is this really needed? We can get it from the project relation
	txHash: String!
	chainId: Int!

	# Time tracking
	startBlock: BigInt!
	endBlock: BigInt!
	startDate: DateTime!
	endDate: DateTime!

	# Token information
	projectTokenAddress: String!
	vAssetAddress: String!
	nativeAssetAddress: String! # Is this really needed?
	# Pool configuration
	# maxVAssetsPerStaker: BigInt!
	# ownerShareOfInterest: Int!

	# Live stats
	totalStaked: BigInt! # Already in contract
	totalStakers: Int!

	# Exchange rates
	# currentNativeExRate: BigInt!
	# cumulativeProjectExRate: BigInt!

	# APY information
	stakerAPY: Float!
	ownerAPY: Float!
	platformAPY: Float!
	combinedAPY: Float!

	# Relations
	project: Project!
	stakes: [LaunchpoolStake!] @derivedFrom(field: "launchpool")
	unstakes: [LaunchpoolUnstake!] @derivedFrom(field: "launchpool")
	emissionRates: [LaunchpoolEmissionRate!] @derivedFrom(field: "launchpool") # Is this really needed?
	nativeRateSnapshots: [LaunchpoolNativeExRateSnapshot!]
		@derivedFrom(field: "launchpool")
	projectRateSnapshots: [LaunchpoolProjectExRateSnapshot!]
		@derivedFrom(field: "launchpool")

	createdAt: DateTime!
	updatedAt: DateTime!
}

type User @entity {
	id: ID! # This is on-chain user address (yes, it's implicit af thanks to TypeORM constraint to have column called id)
	firstSeen: DateTime!
	lastActive: DateTime!

	# Relations
	launchpoolStakes: [LaunchpoolStake!] @derivedFrom(field: "user")
	launchpoolUnstakes: [LaunchpoolUnstake!] @derivedFrom(field: "user")
	ownedProjects: [Project!] @derivedFrom(field: "owner")

	# User stats
	totalPoolsParticipated: Int!
	totalStaked: BigInt! # Is this really needed? We have totalStaked in contract, plus it can be problematic since we have multiple types of pools, each with different currencies/tokens
}

# Is this table really needed?
type LaunchpoolEmissionRate @entity {
	id: ID!
	poolId: String!
	changeBlock: BigInt!
	changeDate: DateTime!
	emissionRate: BigInt!

	# Relations
	launchpool: Launchpool!
}

type LaunchpoolNativeExRateSnapshot @entity {
	id: ID!
	poolId: String!
	timestamp: DateTime!
	blockNumber: BigInt!
	exchangeRate: BigInt!
	avgGradient: BigInt!
	sampleCount: Int!

	# Relations
	launchpool: Launchpool!
}

type LaunchpoolProjectExRateSnapshot @entity {
	id: ID!
	poolId: String!
	timestamp: DateTime!
	blockNumber: BigInt!
	cumulativeExchangeRate: BigInt!
	pendingExchangeRate: BigInt!

	# Relations
	launchpool: Launchpool!
}

type LaunchpoolStake @entity {
	id: ID!
	# userAddress: String!
	# poolId: String!
	amount: BigInt!
	# nativeAmount: BigInt! # Already in contract
	blockNumber: BigInt!
	timestamp: DateTime!
	txHash: String!

	# Exchange rates
	# nativeExchangeRate: BigInt! # Is this really needed?
	# cumulativeProjectExRate: BigInt! # Is this really needed?

	# Relations
	user: User!
	launchpool: Launchpool!

	createdAt: DateTime!
}

type LaunchpoolUnstake @entity {
	id: ID!
	# userAddress: String! # Redundant, already specified by the user ID
	# poolId: String!
	amount: BigInt!
	# nativeAmount: BigInt! # Is this really needed?
	# claimedProjectTokens: BigInt! # Is this really needed?
	blockNumber: BigInt!
	timestamp: DateTime!
	txHash: String!

	# Exchange rates
	# nativeExchangeRate: BigInt! # Is this really needed?
	# cumulativeProjectExRate: BigInt! # Is this really needed?

	# Relations
	user: User!
	launchpool: Launchpool!

	createdAt: DateTime!
}

type LaunchpoolInterestClaim @entity {
	id: ID!
	# poolId: String!
	claimType: LaunchpoolClaimType!
	claimerAddress: String!
	amount: BigInt!
	blockNumber: BigInt!
	timestamp: DateTime!
	txHash: String!

	# Relations
	launchpool: Launchpool!
	user: User!

	createdAt: DateTime!
}

type LaunchpoolProjectTokenClaim @entity {
	id: ID!
	# projectId: String!
	# userAddress: String!
	projectTokenAmount: BigInt!
	projectTokenDecimals: Int! # Denormalized column, combined with caching for fast aggregation
	blockNumber: BigInt!
	timestamp: DateTime!
	txHash: String!

	# Relations
	user: User!
	launchpool: Launchpool!

	createdAt: DateTime!
}

type PlatformMetricsSnapshots @entity {
	id: ID!
	timestamp: DateTime!
	countProjects: Int!
	countLaunchpools: Int!
	countUniqueUsers: Int!
	countTransactions: Int!
	countActiveUsers: Int! # Active users: users who had > 1 transaction on this platform since the timestamp of the previous metrics snapshot
	totalValueLocked: BigInt! # total value locked, in USD
	tokensDistributed: BigInt! # Total project tokens distributed (just bare amount, no decimals)
}

enum LaunchpoolClaimType {
	OWNER_INTEREST
	PLATFORM_FEE
}
